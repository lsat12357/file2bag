#!/usr/bin/env ruby

require 'linkeddata'
require 'yaml'
require 'bagit'
require 'logger'
require 'docopt'
require './mapping_methods.rb'


include MappingMethods

doc = <<DOCOPT
Tab delim file to BagIt

Consumes a listing of digital files and converts them into
bags.

Usage:
  #{__FILE__} [--skip] [--folder] [--map-file=<file>] SOURCE CONTENTDIR [TARGET]
  #{__FILE__} -h | --version

Options:
  -s --skip             Skip missing fields.
  -f --folder           Ignore records that aren't folders
  -m --map-file=<file>  Mapping file. [default: mapping.yml]
  -h --help             Show this help screen.
  -v --version          Show version.

DOCOPT
URLSTRING = [:has_FindingAid,:citation] #exceptions to urls being added as uris

def create_graphs(file, collection)
  graphs = []

  subject = "http://example.org/ns/"
  counter = 0 #for subject placeholder
  dmrec = ""
  begin
    File.readlines(file, :encoding => "UTF-8").each do |line|
      graph = RDF::Graph.new

      arr = line.strip.split("\t")
      if arr.empty?
        break
      end
      counter2 = 0 #to iterate through the predicates
      arr.each do |thing|
        arr2 = thing.split("|")
        if counter2 == @collection_mappings.length
          puts "warning, mismatch btwn desc.txt and predicate list at line #{{counter}}"
        end
        if @collection_mappings[counter2] == "dmrec" #don't make a triple, just store
          dmrec = thing
        else
          arr3 = @collection_mappings[counter2].split(":")

          arr2.each do |item|
            predicate = @mappings['namespaces'][arr3[0]] + arr3[1]

            if item.include?("http") && !URLSTRING.include?(arr3[1].to_sym)
              graph << RDF::Statement(RDF::URI(subject + counter.to_s), RDF::URI(predicate), RDF::URI(item.strip))
            else
              graph << RDF::Statement(RDF::URI(subject + counter.to_s), RDF::URI(predicate), RDF::Literal(item.strip))
            end #if
          end #items of a given predicate
        end #if dmrec
        counter2 += 1
      end #do thing
      counter += 1
      if !dmrec.empty?
        graph << RDF::Statement(RDF::URI(subject + dmrec), RDF::DC.replaces, RDF::URI("http://oregondigital.org/u?/#{collection},#{dmrec}"))
        graph = set_subject(graph, RDF::URI(subject + dmrec))
      end
      graphs << graph
    end #each line

    graphs
  rescue StandardError => e
    puts "Something went wrong at line #{{counter}}"
    puts e.message
    puts e.backtrace.inspect
  end
end #def

def set_subject(graph, subject)
  graph.each_statement do |statement|
    #if statement.subject.node?
      graph.delete(statement)
      graph << RDF::Statement.new(subject, statement.predicate, statement.object)
    #end
  end
  graph
end

def write_desc_metadata(graph, bag)
  query = RDF::Query.new do
      pattern [:subject, RDF::URI('http://opaquenamespace.org/ns/full'), :full]
    end
    results = query.execute(graph)
    #puts results.first[:subject]
    if !results.empty?
      graph.delete([results.first[:subject], RDF::URI('http://opaquenamespace.org/ns/full'), results.first[:full]] )
    end
  RDF::Writer.open("descMetadata.nt", :format => :ntriples) do |writer|
    writer << graph
  end
  bag.add_tag_file('descMetadata.nt', 'descMetadata.nt')
end

def add_content_file(graph, bag)

  begin
    query = RDF::Query.new do
      pattern [:subject, RDF::URI('http://opaquenamespace.org/ns/full'), :full]
    end
    results = query.execute(graph)


    if results.empty?
      puts 'no full'
      return nil
    else fname = Pathname(results.first[:full].to_s).basename.to_s unless fname #else if !fname, then fname = Pathname etc.
    fname = fname.split(/\\/).last

    end
    #file = File.join(dir, '', fname.to_s.split('\\')[-1].gsub(/^1_/, ''))  #
    file = File.join(@opts['CONTENTDIR'], '', fname.to_s.split('\\')[-1].gsub(/^1_/, ''))  #
    #require 'find'
    #Find.find(dir) do |path|
    #  file = path if path.include? fname
    #end
    bag.add_file("content.#{Pathname(file).basename.to_s.split('.').last}", file)
  rescue Errno::ENOENT => e
    @log.warn("#{fname}: No File Found.")
  end
end

def make_bag(dir, graph, subject, collection)
  bag = BagIt::Bag.new(File.join(dir, File.basename(subject)))
  load_compound_objects(collection, graph, subject) #--------------sticking this in here, LS
  add_content_file(graph, bag)
  write_desc_metadata(graph, bag)

  bag.tagmanifest!
  bag.manifest!
end

def make_coll_bags(source, target, collection, *args)
  #file = File.join(dir, collection, 'desc.txt') #this is the tab delineated file

  col_dir = FileUtils.mkdir_p(File.join(target, collection))#make the subdir to receive the bags
  @collection_mappings = @mappings['mappings'][collection]

  graphs = create_graphs(source, collection) #was file

  if @missing_fields.empty? or @opts['--skip']
    puts 'making bags'

    graphs.each do |graph|
      subject = ''
      graph.each_statement do |s|

        if s.subject.start_with? 'http://example.org/ns/'
          subject = s.subject
          #break
        end #if
      end #do s
      make_bag(col_dir, graph, subject, collection)
    end #do graph
  else
    puts "Missing fields, not writing bags for #{collection}. Add fields to mapping.yml, or use --skip flag."
  end #if missing fields
end #def

def make_all_bags(source, target)
  target = FileUtils.mkdir_p(target)#make the top level receiving directory, default is cdm2bag-master/bags
 # Dir.foreach(dir) do |collection|
    #next if collection == '.' or collection == '..'
    fname = source.split("/").last
    collection = fname.split("_").first
    make_coll_bags(source, target, collection)
  #end
end

begin
  #@opts = Docopt::docopt(doc, version: 'cdm2bag 0.0.2')
@opts = Docopt::docopt(doc)
  @missing_fields = []
  @mappings = YAML.load_file(@opts['--map-file'])
  @namespaces = {}
  @mappings['namespaces'].each do |ns, base_uri|
    @namespaces[ns] = RDF::Vocabulary.new(base_uri)
  end
  @skip = ['unknown', 'n/a']

  @log = Logger.new('logfile.log')

  make_all_bags(@opts['SOURCE'], @opts['TARGET'] || 'bags')#target is the dir to receive bags #source is the pathtosourcefile
  puts @missing_fields unless @missing_fields.empty?
rescue Docopt::Exit => e
  puts e.message
end
